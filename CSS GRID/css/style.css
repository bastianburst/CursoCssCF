* {
    margin: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Arial';
}

/* con display grid activamos un grid container y lo que está
    dentro se vuelve un grid item; 
    
    Si usamos display inline-grid este contendor se comportaria como linea
    es decir que los elementos contiguos se posicionaran al lado
    SI usamos display grid se comporta como si pusieramos display block
    por lo que ocupará toda la linea y el siguuiente elemento
    quedará debajo
    
    POr defecto css grid tiene las siguientes propiedades:
    
    Grid-autoflow: row Por defecto se pondrán fila
    justify-items: stretch Se estira por todo el acnho horizontalmente
    ALign items: stretch  Se estira por todo el alto
    
    Los items tiene un high:auto osea que la altura de 
    los elemtos se define por su contenido*/

/*Definir columnas:
    
    Esto lo hacemos con la propiedad grid-template-columns
    Esto acetpa cualquier cantidad de medida permitida en css
    cada valor que coloquemos será una columna
    
    Aqui observamos que si tenemos 3 columnas tenemos 4 grid lines*/
.grid {

    display: grid;
    /* grid-auto-flow: row; Por defecto */

    /* grid-template-columns: 60px 5rem 20% 25%; */

    /*Como en este ejemplo definimos 3 columnas
    significa que solo tenemos espacio para 3 elementos
    como tenemos 6 lo que hace css grid es crear otra fila
    Esto es porque estamos en un flujo en fila que es el que tiene por defecto*/
    /* NO queremos que las filas se creen implicitamente
    para esto usaremos la propiedad grid-template-rows */

    /* grid-template-rows: 20% 20% 20% 25%; */

    /* PAra crear varias columnas no tenemos que poner un montón de valores, 
    usamos la función repeat (cantidad, medida);
    Así tendrias n columnas o filas del mismo tamaño-
    
    Si quiero agregar otra columna de un valor diferente lo ponemos despues
    del repeat Ejm: grid-template-columns: repeat(4,1fr)  40%;*/

    /* También puedo decirla que se repita dos veces una cantidad con un valor
      grid-template-columns: repeat(2,1fr 10%);
      Esto seria equivalente a poner: 1fr 10% 1fr 10%
      Es decir que es patrón de poner un elemento con 1fr y otro con 10% se repitiria n veces*/

    /* 
    UNIDADES FLEXIBLES DE CSS GRID:
    fr = es una unidad flexible (fracción)
    se usa para representar las fracciones del espacio disponible
    que tenemos en nuestra cuadricula */

    grid-template-columns: repeat(4, 1fr);

    /* Estamos diciendo que reparta el espacio en 4 fracciones de forma igual
    Sin dejar ningún espacio ya que tomará todo */

    grid-template-rows: repeat(4, 1fr);

    /* Con esto creamos una grid de 4*4 que ocupa todo el grid-container
    Hay 8 elementos */

    /* VALOR AUTO
Hay un valor auto en css grid 
grid-template-columns: repeat(4, auto);
Aunque a simple vista tiene el mismo efecto que usar fr
en realidad no es lo mismo.

Auto, Primero le dará a cada track el tamaño minimo para que exista
Este se da por el contenido del elemento, en este caso es el mismo
por eso los grids quedan del mismo tamaño, pero si hubiera una caja con más texto
ese elemento sería más grande que los otros, luego repartiria lo demás equitativamente

fr por otro lado reparte el mismo espacio sin importar el tamaño de los elementos; */

    /* Ejemplo2: grid-template-columns: auto repeat(3, auto);
Aquí le decimos que cree una columna en auto (se ajusta al contenido) 
dandole el tamñao minimo para existir, y luego cree 3 con fr
osea que lo que hará es que el resto de espacio será
 repartido equitativamente sin importar el tamaño en 3 partes */


    /* 
 POSICIONADO POR LINEAS CSS GRID
 Una vez definidas las filas y columnas ya está completa la grid
 
 POdemos definir la posición de nuestros elementos con las lineas de la grid
 COmo sabemos el numero de lineas es 1 más que la cantidad de grid-cells
 (Vamos al element 1)*/

    /* GAP 
    TAmbién podemos usar gap con colum-gap row-gap
    */

    /* row-gap: 3em; */

    /* column-gap: 10px; */

    /*Short hand
    Poniendo dos valores uno seria para row y el segundo para columns
    POniendo uno solo se aplicaría para ambos el mismo valor */
    /* gap row column;  */
    /* gap: 3em 10px; */
    /* COn gap agregamos espaciado entre las filas y columnas
no al final de ellas.
si usaramos margin no tendriamos el mismo efecto sino
que tomariamos espacio de la celda; */
    width: 90%;
    max-width: 600px;
    margin: 80px auto;
    overflow: hidden;
    outline: 3px solid;
    height: 500px;

    /* LA GRID IMPLICITA
    EL placement es el flow por defecto que tiene css grid
    POr defecto los elementos se acomodan en celdas en filas de izquierda a derecha
    Este orden podemos mdoficarlo con las lineas como vimos antes

    Tambien podemos ponerlo en columnas y veremos que igual se acomodan
    en el mismo orden pero de arriba hacia abajo

    Entonces si agregas muhcos elementos estos se van a acomodar
    dependiendo del grid-auto-flow que por defecto es row
    */

    /* 
    Cuando usamos unidades fr o medidas exactas 
    Sea con grid-rwo o columns, hay otras propiedades
    que son:

    grid-auto-columns: ;
    grid-auto-rows: ; 
    
    Estas siempre tienen un valor de auto por defecto
    pero los puedes cambiar, esto define el tamaño de las filas y columnas
    POr eso es que cuando creas una grid de forma sencilla
    las celdas siempre son del mismo tamaño
    
    Podemos poner varios valores grid-auto-rows: 10px 50px;
    Dando como resultado que una fila sea de 10px y la otra de 50px
    En este caso lo que haría seria intercalar hasta que complete el numero de elementos*/

    /* grid-auto-rows: 100px 50px; */

    /* Nota:  Solo puedes usar auto-rows cuando está en filas 
    y solo pudes usar auto-columns cuando está en columnas */

    /*
    COntinuación de explicaciones

    GRID AUTO FLOW

    Cuando posicionamos con lineas en css grid podemos notar que quedan espacios
    en blanco, esto es porque los demás elementos
    que no fueron posicionados por lineas se acomodan en función
    a la nueva posición del elemento cuya posición fue modificada.
    entonces si el elemtno 2 e smuy grande y el 3 también,
    va a dejar un espacio y va a saltar a la siguiente linea
    
    Para rellenar esos espacios podemos usar la propiedad dense
    Estos espacios se llenan con otros elementos dentro del grid que quepan
    en ese espacio.  Entonces digamos que el elemtno 2 y 2 son grandes y ocupan bastante espacio, dejando un epacio en blanco entre
    el elemento 1 y 2.  El siguiente elemento en la secuencia que quepa en ese espacio, se posicionará allí

    POdemos aplicar a columnas con column dense
    o a row con row dense, aunque con ponerlo dense ya funciona
    ya que por defecto está en row
    */
    /*Ejemplo: (revisar los efectos en el navegador)
    Podriamos usarlo si tenemos una galeroa de imagenes de fierentes tamaños
    y hay un espacio vació, de esa forma se rellenará con una foto
    que quepa de las que hay dentro del grid*/

    grid-auto-flow: dense;

    /* grid-template-columns:repeat(2,60px);    
    grid-template-rows:repeat(2,1fr); */


    /* ORDER:
    Podemos usar también order en css Grid 
    de la misma forma que lo hacemos en flexbox 
    
    por defecto tienen un order de 0
    
    y lo usamos para los grid-items*/

}

.item {
    order: 0;
    color: #fff;
    font-size: 2.5rem;
}

.item-1 {
    background-color: slateblue;
    order:0;

    /*se posiciona al elemento 1 en la linea x de ahí se posiconan los demás 
    Para esto usamos grid-column-start
    Definimos la linea de inicio de nuestro grid-item*/

    /* grid-column-start: 3; */

    /*Si queremos que el elemento ocupe varias celdas,
    podemos usar la propiedad grid-column-end que es el complemento de la anterior
    En este ejemplo el elemento 1 ocupa desde la linea 3 a la 5
    osea dos celdas*/

    /* grid-column-end: 5; */

    /*Si queremos que ocupe varias lineas pero en filas
    POdemos usar grid-row-start y grid-row-end*/

    /* Empezamos en la linea 2 y los extendemos hasta la 5 
    el elemento 1 */

    /* grid-row-start: 2; */

    /* grid-row-end: 5; */

    /* Una forma de acortar esto es usar grid-column o grid-row;
    pasando los valores de estar y end  separados por / */

    /* grid-column:3/5; */
    /* grid-row:2/5; */

    /* De igual forma si ponemos un solo valor
    Sería como poner solo el start 
    grid-column: line-start;
    grid-row: line-start / line-end;*/


    /* SPAN EN CSS GRID

    También podemos usar un valor reservado llamado span
    Está hecho para grid column y grid row
    Nos permite decir al grid item cuantos tracks o filas o columnas quiero que abarque
    Ejemplo: grid-column: span 2;
    Podemos primero definir la linea de incio y luego decir hasta donde quiero expandir
    grid-column: 2 / span3; (Inicia en linea 2 se expande 3 lineas a partir de ahí)
    */

    /*LINEAS NEGATIVAS EN GRID
    
    En grid podemos tener lineas en orden 1, 2, 3, 4 etc.
    Pero también en valores negativos -1, -2, -3 etc.
    
    Esto es util si queremos que un elemento se extienda hasta el final
    pero no estamos seguros de que cambie el tamaño total
    Entnces si ponemos 
    
    grid-column: 1/-1
    
    Estamos diciendo que se extienda 
    hasta la ultima linea que seria -1
    Si pusieramos hasta -2 en este ejemplo 
    llegaria hasta la linea 4*/


    /*GUTTER EN CSS GRID
    Podemos usar otro short-hand grid area:|
    Es el equivalente  ausar grod-rwo y grid-column
    pero en una sola linea

    Grid-area: ponemos los 4 valores separados por /
    Ver item 2
    */


}


.item-2 {
    /* Estrtuctura de grid-area
    
    grid-area:row-start / column-start / row-end / column-end ; */
    /* grid-area:2 / 1 / 5/ 3 ;  */

    /* Ejemplo 2 */

    grid-row: span 2;

    grid-column: span 2 / -1;

    /* Esto equivaldría a poner con area
    Si no hay un valor final de linea, como en este ejemplo
    En su lugar ponemos auto */

    /* grid-area: span 2 / span 2 /auto/ -1; */

    background-color: darkmagenta;

    /*Aqui el row empezaria en la linea 4 y solo ocuparia una linea*/
    /* grid-row: 4;*/
    /*Aqui el column empezaria en la linea 1 de columnas y terminaria en la linea 5*/
    /*grid-column: 1/5; */

    /*Ejemplo de span;
    Solo debo pasar el valor el span y el número de
    tracks que quiero que abarque*/

    /* grid-column: 2 / span 3; */
    /* grid-row:span 1;  */

}

.item-3 {
    background-color: tomato;
    grid-row: 2/3;
    grid-column: 1/3;
}

.item-4 {
    grid-column: 1/3;
    grid-row: 3;
    background-color: midnightblue;
}

.item-5 {

    background-color: seagreen;
}

.item-6 {
    background-color: crimson;
}

.item-7 {

    background-color: rgb(64, 28, 122);
}

.item-8 {
    background-color: rgb(131, 133, 36);
}