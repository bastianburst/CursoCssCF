* {
    margin: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, Helvetica, sans-serif;
}

.container {
    width: 450px;
    height: 450px;
    outline: 2px solid;
    margin: 60px auto;

    /* Para usar flexbox vamoa requerir un contenedor
    Usamos display: flex en el contenendor padre
    Con esto ya estamos usando flex box

    Si observas ahora los elementos se ponen uno al lado del otro

    Ahora este elemento es un flex container
    Y los que están dentro o los hijos se vuelven flex items

    Si agregas más elementos dentro del contenedor van a adoptar el mismo comportamiento 
    */
    display: flex;
    /*flex-direction: column;*/
    /* flex-wrap: wrap;  */
    justify-content: flex-start;
    /*align-items: center;*/
    align-content: space-around;
}

/* Main Axis (eje) en flexbox 

Si no agregas ninguna caracteristica el ancho y alto 
de los elementos será el predeterminado por el mismo elemento.

El main axis es el eje o dirección principal y la cross es perpendicular a esta,
entonces si el main axis es en fila el cross axis será en columna

Si usamos row (O lo dejamos por defecto)el main axis va de izquiera a derecha y el cross axis de arriba hacia abajo
Si aplicamos el reverse entonces sería al contrario en el main axis el cross seguiría igual de arriba hacia abajo

Si usamos column ahora el main axis seria de arriba hacia abajo y el cross de izquierda a derecha
En el reverse seria al contrario y el cross serguiría igual

Solo cambia el main axis por eso es tan importante ya que es el eje principal.

flex-direction: La dirección de los elementos, puede ser filas (row) o columnas (column), por defecto es row

*/

/*El flujo de flexbox
El contenedor se estiran pero no se desbordan del contenedor
Nunca rebasan el contenedor, cuanod la suma de los elementos
da un tamaño mayoir al contenedor, estos elementos dejan de crecer.


Para gestionar este comportamiento usamos
Flex wrap: por defecto viene con el valor nowrap;
que sería el comportamiento descrito antes.

Si le ponemos wrap, le indicamos que si los elementos no caben
en el flex container cree una nueva linea dependiendo de la flex-direction

En conclusión no permite que se salga de su contenedor pero podemos
gestionar si al sobrepasar el tamaño crea nuevas lineas o deja de crecer cada elemento

Otra opción es poner wrap-reverse: En este casoempezarian a desbordar los elementos la final del cross axis

*/

/*Alineación en el Main axis
Lo hacemos con justify content

NOs ayuda en caso de que haya espacio disponible en este eje, nos sirve para column y row
Por lo que podemos alinearlos
-Desde el inicio del Main axis con flex-start que es la que tiene por defecto
-Desde el final con flex-end
-Distribuido en el espacio equitativamente
con el primero elemento pegado a un borde y el último al otro borde con space-between
-Distribuido en el espacio equitativamente pero sin estar pegado a los lados con space-around
-Distribuido equitativamente  sin espacios con space-evenly
-Centrado todos juntos sin espacio entre ellos con center
*/

/*Alineación en el cross axis

Esto lo hacemos con la propiedad align-items
-stretch: Estira a los elementos por todo el cross axis, este es lo que tiene por defecto
Si no definimos un alto en el elemento item lo estirará hasta el final del contenedor
Si hay un tamaño definido pondrá cada item del alto definido con height o line-height
-flex-start manda los elementos al principo del cross axis
-flex-end lo mismo pero al contrario
-center, se centra en el cross axis (con align-items y justify content podemos centrar en ambos ejes
-baseline hace que los elemento se alinean con referencia a la linea base del texto


Otra propiedad es align-content:
Esto lo usamos cuando tenemos varias lineas de elementos en el cross axis porque se desbordan de su contenedor debido a su tamaño
 y podemos usar los siguientes valores
-stretch Hace que se alarguen y queden juntos (junto con flex-wrap:wrap).
-flex-start empaqueta todo y lo manda al inicio del cross axis, recuerda que align-content solo funciona 
en el cross axis
-flex-end empaqueta y manda al final
-center empaqueta y lo centra
-space-around
-space evenly
-space between

Estos se comporta igual que con la propiedad justify content pero con el cross axis

cuando tengamos varias cossas en el cross axis debemos usar align content ya que con este no quedan espacios entre elementos
en el cross axis, mientras que si usamos align-items quedará el espacio
*/

/**FLEX y CHROME

En chrome con el inspector de elementos podemos trabajar con flex para ver como quedaría
directamente en el navegador, igual como cuando cambiamos atributos css desde ahí mismo*/


/* FLEX ITEMS
Los flex items son los elementos hijos

Propiedades de los items

Order

order:  Permite ordenar los elementos por número, cambiando su posición

El que definamos como 0 se pondrá al inicio sin importar donde esté posicionado originalmente
0 es el valor por defecto con ese valor queda organizado de acuerdo a como está en el HTML
-1 es menor que 0 por lo que se podria detrás del 0 el elemento
Los elementos seria -2 -1 0 1 2 3 etc., así se organizarian por número



Flex-grow:
Se encarga de distribuir el espacio sobrante entre los items

Si pones un flex-grow de 1 ahora cada elemento tendría
una fracción de ese espacio disponible, por lo que llenarian el espacio faltante
El valor de flex grow por defecto es 0

Podemos hacer que un elemento tenga más del espacio definiendo un flex-grow en el elemento directamente
ASí si todos los elementos tienen un flex-grow de 1 y le pongo flex-grow de 
  auno ese tendrá un mayor pedazo del espacio.

flex-basis:  
Cuando tenemos un elemento que de por sí es más grande que los demás
Pero queremos que sea del mismo tamaño que el resto, podemos usar flex-basis:0
YA que por ser de mayoor tamaño al usar flex grow: 1 a secas no quedaría del mismo tamaño
Poner auto significa que es su estado normal.


flex-shrink:
Es lo contrario a flex grow, determina el factor para que un elemento se encoja
En lo casos en los que no hay espacio suficiente o faltante
repartimos el espacio en fracciones
flex-shrink por defecto de todos los elementos es 1
S ponemos el valor en 0 quetariamos la flexibilidad a los elementos por lo que entonces estos se desbordarían

De flex-grow y flex-shrink es de donde se denomina que flexbox es flexible precisamente

*/

/**Alineamineto en los Flex items

Las propiedades grow shronk y basis se pueden definir en un
solo llamado con el propiedad flex
flex: Primero el grow, segundo shrink y de ultimo el basis
Ejemplo: flex:1 1 auto;
Si ponemos flex:1 seria como poner grow en 1shitnk en 1 y basis en 0

Otras formas de alinear los items::after


align-self: te permite alinear un solo elemento, hace lo mismos que align items
pero solo para un elemento, en el corss axis
si además pones hight auto junto con align.self stretch, se estiraria ocupando todo el cross axis


Nota:
NO hay una propiedad para hacer esto en el main axis con flexbox
Justify-self se usa para Css grid

Nota 2:
Hay un truco para hacerlo pero usanod margenes con margin-left/right: auto
igual podemos hacer ese truco com margin-top/bottom
Incluso podemos centrar usando margin:auto; aplicando margen a todas las direcciones

*/
.element {
    width: 200px;
    height: 100px;
    line-height: 100px;
    text-align: center;
    background-color: slateblue;
    color: #fff;
    font-size: 2rem;
    order: 0;
    /*Con flexgrow repartimos el espacio sobrante entre los elementos
    con el valor 1 se reparte por partes iguales, da igual el valor*/
    /* flex-grow:1; */
    /*Con flex basis hacemos que
    los elementos sean del mismo tamaño
    sin importar si alguno es más grande que los demás
    por defecto, si lo ponemos en 0 serian del tamaño que tienen por defecto si no has defnido un width en css*/
    /* flex-basis:1;  */

    /* flex-shrink: 1; */
    /*Esto es igual a definirlos por separado*/
    flex: 1 1 0;
}

.element_1 {
    background-color: coral;
    /* Al poner este order este elemento pasaría al final ya que los demás tienen 0 */
    order: 1;
    /*Al poner un flex grow mayor en este elemento 1
    observamos que este elemento toma una porción mayor
    del espacio disponible*/
    /* flex-grow: 4; */
}

.element_2 {
    background-color: lightgreen;
    /* flex-shrink: 2; */
    /* Con esto mandariamos este item al fondo del cross axis */
    align-self: stretch;
    /* Si usamos el valor stretch + el heicght auto el elemento se estira ocupando todo el cross axis */
    height: auto;
}

.element_3 {
    background-color: lightblue;
}

.element_4 {
    background-color: lawngreen;
}